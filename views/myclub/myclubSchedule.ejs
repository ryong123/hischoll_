<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Custom Calendar</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/clubSchedule.css" />

  <!-- Axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<body>
  <%- include('../component/header')%>

    <div class="sec_cal">
      <div class="cal_nav">
        <a href="javascript:;" class="nav-btn go-prev">prev</a>
        <div class="year-month"></div>
        <a href="javascript:;" class="nav-btn go-next">next</a>
      </div>
      <div class="cal_wrap">
        <div class="days">
          <div class="day">MON</div>
          <div class="day">TUE</div>
          <div class="day">WED</div>
          <div class="day">THU</div>
          <div class="day">FRI</div>
          <div class="day">SAT</div>
          <div class="day">SUN</div>
        </div>
        <div class="dates">
          <!-- 오늘 날짜의 일정 목록 -->
          <div class="current-date-schedules">
            <!-- 여기에 오늘 날짜의 일정 목록이 표시 -->
          </div>
        </div>

        <div class="schdules-box">
          <button id="openBtn" class="btn">일정보기</button>
          <div class="list-additional">
            <div class="list-additional-main"></div>
          </div>
        </div>

        <button id="closeBtn" class="btn">닫기</button>
      </div>
    </div>

    <div class="fullscreen-modal">
      <div class="fullscreen-modal-content">
        <span class="close-fullscreen-modal">×</span>
        <div class="list">
          <div class="list-title">제목</div>
          <input type="text" class="dateInput-title" placeholder="제목을 입력하세요" />
          <div class="list-content">내용</div>
          <input type="text" class="dateInput-content" placeholder="내용을 입력하세요" />
        </div>
        <button id="submitDate">확인</button>
      </div>
    </div>

    <script>
      // 전역 변수 선언 부분
      const fullscreenModal = document.querySelector('.fullscreen-modal');
      const fullscreenModelClose = document.querySelector(
        '.close-fullscreen-modal'
      );
      const dateInputTitle = document.querySelector('.dateInput-title');
      const dateInputContent = document.querySelector('.dateInput-content');
      const openBtn = document.getElementById('openBtn');
      const closeBtn = document.getElementById('closeBtn');
      const datesContainer = document.querySelector('.dates');
      const yearMonth = document.querySelector('.year-month');
      const goPrevBtn = document.querySelector('.go-prev');
      const goNextBtn = document.querySelector('.go-next');

      let thisMonth;
      let selectedDate;
      let schedules = []; // 서버에서 받아온 일정을 저장할 배열
      let scheduleIdCounter = 1;

      // 서버에서 일정 데이터를 가져오는 함수
      function fetchDataFromServer() {
        axios
          .post(`http://localhost:8000/myClubSchedule/${1}`)
          .then((response) => {
            schedules = response.data; 
            updateScheduleList();
          })
          .catch((error) => {
            console.error('서버 요청 중 오류 발생:', error);
          });
      }

      // 일정 데이터를 달력에 추가하는 함수
      function addSchedulesToCalendar(data) {
        data.forEach((schedule) => {
          const date = schedule.date;
          const title = schedule.title;
          const content = schedule.content;
          addScheduleToSelectedDate(date, title, content);
        });
      }

      // 선택한 날짜에 일정을 추가하는 함수
      function addScheduleToSelectedDate(date, title, content) {
        const selectedDateElem = document.querySelector(
          `.day[data-date="${date}"]`
        );
        if (selectedDateElem) {
          const scheduleElem = document.createElement('div');
          scheduleElem.textContent = `${title} - ${content}`;
          selectedDateElem.appendChild(scheduleElem);
          updateIconForDate(date);
        }
      }

      // 일정 추가시 날짜 위에 아이콘 표시하는 함수
      function updateIconForDate(date) {
        const dayElem = document.querySelector(`.day[data-date="${date}"]`);
        if (dayElem) {
          const hasSchedule = schedules.some(
            (schedule) => schedule.date === date
          );
          let icon = dayElem.querySelector('.icon');

          if (hasSchedule && !icon) {
            icon = document.createElement('div');
            icon.className = 'icon';
            dayElem.appendChild(icon);
          } else if (!hasSchedule && icon) {
            icon.remove();
          }
        }
      }

      // 클릭한 날짜에 해당하는 일정을 표시하는 함수
      function toggleSchedulesVisibility(selectedDate) {
        const allDates = document.querySelectorAll('.day.current');
        allDates.forEach((dateElem) => {
          const date = dateElem.getAttribute('data-date');
          const isSelectedDate = date === selectedDate;
          dateElem.classList.toggle('selected', isSelectedDate);
          updateIconForDate(date);
        });
      }

      // 모달 숨기는 함수
      function hideFullscreenModal() {
        fullscreenModal.style.display = 'none';
        selectedDate = null;
        toggleSchedulesVisibility(null);
      }

      fullscreenModelClose.addEventListener('click', hideFullscreenModal);

      // 스케줄 박스 표시/숨김 함수
      function toggleSchedulesBox(displayStyle) {
        const listAdditional = document.querySelector('.list-additional');
        listAdditional.style.display = displayStyle;
      }

      function openSchedulesBox() {
        toggleSchedulesBox('grid');
        closeBtn.style.display = 'block';
        openBtn.style.display = 'none';
      }

      function closeSchedulesBox() {
        toggleSchedulesBox('none');
        closeBtn.style.display = 'none';
        openBtn.style.display = 'block';
      }

      openBtn.addEventListener('click', openSchedulesBox);
      closeBtn.addEventListener('click', closeSchedulesBox);

      // 날짜 클릭 이벤트 처리
      datesContainer.addEventListener('dblclick', function (e) {
        if (e.target.classList.contains('current')) {
          const clickedDate = e.target.textContent;
          fullscreenModal.style.display = 'flex';
          const selectedDateString = `${thisMonth.getFullYear()}-${(
            '0' +
            (thisMonth.getMonth() + 1)
          ).slice(-2)}-${('0' + clickedDate).slice(-2)}`;
          addIconForDate(selectedDateString);
        }
      });


      // 현재 클릭한 테두리 생성 및 상단 아이콘 표시
      function addIconForDate(date) {
        const dayElem = document.querySelector(`.day[data-date="${date}"]`);
        if (dayElem) {
          const icon = dayElem.querySelector('.icon');
          if (!icon) {
            const iconElem = document.createElement('div');
            iconElem.className = 'icon';
            dayElem.appendChild(iconElem);
          }
        }
      }

      datesContainer.addEventListener('click', function (e) {
        if (e.target.classList.contains('current')) {
          const clickedDate = e.target.textContent;
          const clickedDateString = `${thisMonth.getFullYear()}-${(
            '0' +
            (thisMonth.getMonth() + 1)
          ).slice(-2)}-${('0' + clickedDate).slice(-2)}`;
          addIconForDate(clickedDateString);

          if (selectedDate) {
            selectedDate.classList.remove('selected');
          }
          selectedDate = e.target;
          toggleSchedulesVisibility(clickedDateString);
          updateScheduleList(clickedDateString);
        }
      });

      // 일정 등록 이벤트 처리
      document
        .getElementById('submitDate')
        .addEventListener('click', function () {
          const title = dateInputTitle.value.trim();
          const content = dateInputContent.value.trim();
          const titleMaxLength = 15; // 제목의 최대 길이
          const contentMaxLength = 60; // 내용의 최대 길이

          if (
            title.length > titleMaxLength ||
            content.length > contentMaxLength
          ) {
            let message = '';
            if (title.length > titleMaxLength) {
              message += `제목은 ${titleMaxLength}글자 이하여야 합니다.`;
            }
            if (content.length > contentMaxLength) {
              message += `내용은 ${contentMaxLength}글자 이하여야 합니다.`;
            }
            alert(message);
            return;
          }

          // 일정 추가 로직
          const selectedDateString = `${thisMonth.getFullYear()}-${(
            '0' +
            (thisMonth.getMonth() + 1)
          ).slice(-2)}-${('0' + selectedDate.textContent).slice(-2)}`;
          const scheduleData = {
            club_id: 1,
            date: selectedDateString,
            time: '1200',
            title: title,
            content: content,
          };

          axios
            .post(
              `http://localhost:8000/myClubSchedule/${1}`,
              scheduleData
            )
            .then((response) => {
              schedules.push(response.data); // 서버에서 반환된 새 일정을 로컬 상태에 추가
              updateScheduleList(selectedDateString);
              // 모달 초기화 및 숨김
              fullscreenModal.style.display = 'none';
              dateInputTitle.value = '';
              dateInputContent.value = '';
            })
            .catch((error) => {
              console.error('일정 추가 중 오류 발생:', error);
            });
        });

      // 일정 삭제 함수
      function deleteSchedule(id, schedule) {
        axios
          .delete(`http://localhost:8000/myClubSchedule/${1}/${3}`)
          .then(() => {
            const index = schedules.findIndex((schedule) => schedule.id === id);
            if (index !== -1) {
              schedules.splice(index, 1);
              updateScheduleList(); // 일정 목록 업데이트
            }
          })
          .catch((error) => {
            console.error('일정 삭제 중 오류 발생:', error);
          });
      }

      // 일정 목록 업데이트 함수
      function updateScheduleList(dateToUpdate) {
        const currentDateSchedules = schedules.filter(
          (schedule) => schedule.date === dateToUpdate
        );
        const listAdditional = document.querySelector('.list-additional');
        listAdditional.innerHTML = '';

        currentDateSchedules.forEach((schedule) => {
          let divMain = document.createElement('div');
          divMain.className = 'list-additional-main';

          let divTitle = document.createElement('div');
          divTitle.className = 'list-additional-title';
          divTitle.textContent = schedule.title;

          let divContent = document.createElement('div');
          divContent.className = 'list-additional-content';
          divContent.textContent = schedule.content;

          let divinfo = document.createElement('div');
          divinfo.className = 'additional-info';
          divinfo.textContent = schedule.date;

          let deleteButton = document.createElement('button');
          deleteButton.textContent = '삭제';
          deleteButton.className = 'delete-button';
          deleteButton.dataset.id = schedule.id;
          deleteButton.addEventListener('click', function () {
            deleteSchedule(schedule.id);
          });

          divMain.appendChild(divTitle);
          divMain.appendChild(divContent);
          divMain.appendChild(divinfo);
          divMain.appendChild(deleteButton);
          listAdditional.appendChild(divMain);
        });
      }

      // 캘린더 렌더링 및 초기화 함수
      function calendarInit() {
        const date = new Date();
        thisMonth = new Date(date.getFullYear(), date.getMonth(), 1); // 현재 달의 첫 날을 기준으로 설정
        renderCalendar(thisMonth);

        fetchDataFromServer(); // 서버에서 일정 데이터를 가져오는 함수 호출
      }

      // 캘린더 렌더링 함수
      function renderCalendar(month) {
        const startDay = new Date(month.getFullYear(), month.getMonth(), 0);
        const prevDate = startDay.getDate();
        const prevDay = startDay.getDay();

        const endDay = new Date(month.getFullYear(), month.getMonth() + 1, 0);
        const nextDate = endDay.getDate();
        const nextDay = endDay.getDay();

        yearMonth.textContent = `${month.getFullYear()}년 ${month.getMonth() + 1
          }월`;
        datesContainer.innerHTML = '';

        // 이전 달 날짜 렌더링
        for (let i = prevDate - prevDay + 1; i <= prevDate; i++) {
          datesContainer.innerHTML += `<div class="day prev disable">${i}</div>`;
        }

        // 이번 달 날짜 렌더링
        for (let i = 1; i <= nextDate; i++) {
          let formattedDay = ('0' + i).slice(-2);
          let formattedDate = `${month.getFullYear()}-${(
            '0' +
            (month.getMonth() + 1)
          ).slice(-2)}-${formattedDay}`;
          datesContainer.innerHTML += `<div class="day current" data-date="${formattedDate}">${i}</div>`;
        }

        // 다음 달 날짜 렌더링
        for (let i = 1; i <= (7 - nextDay === 7 ? 0 : 7 - nextDay); i++) {
          datesContainer.innerHTML += `<div class="day next disable">${i}</div>`;
        }

        // 서버에서 가져온 일정 데이터로 캘린더에 아이콘 추가
        schedules.forEach((schedule) => {
          addIconForDate(schedule.date);
        });
      }

      // 이전 달, 다음 달 이동 이벤트 처리
      goPrevBtn.addEventListener('click', () => {
        thisMonth.setMonth(thisMonth.getMonth() - 1);
        renderCalendar(thisMonth);
      });

      goNextBtn.addEventListener('click', () => {
        thisMonth.setMonth(thisMonth.getMonth() + 1);
        renderCalendar(thisMonth);
      });

      // 캘린더 초기화 함수 호출
      calendarInit();
    </script>
</body>

</html>