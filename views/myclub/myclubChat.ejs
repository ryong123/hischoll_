<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/style.css" />
  <title>하이스쿨 - 동아리 채팅</title>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"
    integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <style>
    #body {
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
      /* height: calc(100vh - 130px);
      position: fixed; */
      top: 0;
      left: 0;
      background: var(--color-primary-100);
      /* overflow: scroll; */
    }

    #chat {
      position: fixed;
      bottom: 0px;
      display: flex;
      justify-content: space-between;
      width: calc(100% - 40pxs);
      max-width: calc(600px - 40px);
      box-sizing: border-box;
      background-color: var(--color-gray-50);
      padding: 20px;
    }

    #chat input {
      /* width: 80%; */
      padding: 20px;
      border: 1px solid var(--color-gray-100);
      box-sizing: border-box;
    }


    .my-chat {
      display: flex;
      justify-content: end;
      padding: 2px 0px;
    }

    .my-chat p {
      margin: 0;
      padding: 10px;
      background: var(--color-primary-400);
      border-radius: 8px;
      margin-right: 10px;
    }

    .other-chat {
      display: flex;
      justify-content: start;
      padding: 2px 0px;
    }

    .other-chat p {
      margin: 0;
      padding: 10px;
      background: white;
      border-radius: 8px;
      margin-left: 10px;
    }

    #notice {
      display: flex;
      flex-direction: column;
      text-align: center;
      color: gray;
    }

    #notice p {
      margin: 0;
    }

    .secret-chat p {
      background: pink;
    }

    p.mychatMsg {
      color: white !important;
    }

    p.mychatTime, p.otherchatTime {
      padding: 0;
      background: none;
    }

    p.otherchatName {
      background: none;
    }

  </style>
</head>

<body>
  <%- include('../component/header')%>
  <div class="container">
    <!-- <h1>동아리 채팅</h1> -->

    <div id="main">
      <form id="room">
        <input type="text" id="roomName" placeholder="채팅방 만들기" value="<%= club_id %>" />
        <input type="text" id="userName" placeholder="사용자 이름 입력" value="<%= name %>" />
        <input type="text" id="userid_num" placeholder="사용자 이름 입력" value="<%= userid_num %>" />
        <button type="submit" id="btn">만들기</button>
      </form>
      <!-- <ul id="lists"></ul> -->


    </div>
    <div id="body" hidden>
      <div id="msg">
        <div id="notice"></div>
        <% for (i = 0; i < chats.length; i++) { %> <% if (chats[i].userid_num
        === userid_num) {%>
        <div class="my-chat">
          <p class="mychatTime">
            <% 
              var createdAt = new Date(chats[i].createdAt);
              var hours = createdAt.getHours().toString().padStart(2, '0');
              var minutes = createdAt.getMinutes().toString().padStart(2, '0');
              var seconds = createdAt.getSeconds().toString().padStart(2, '0');
              var formattedTime = hours + '시' + minutes + '분' ;
            %>
            <%= formattedTime %>
          </p>
          <p class="mychatMsg"><%= chats[i].content %></p>
        </div>
        <% } else { %>
        <div class="other-chat">
          <p class="otherchatName"><%= chats[i].from_name %></p>
          <p class="otherchatMsg"><%= chats[i].content %></p>
          <p class="otherchatTime">
            <% 
              var createdAt = new Date(chats[i].createdAt);
              var hours = createdAt.getHours().toString().padStart(2, '0');
              var minutes = createdAt.getMinutes().toString().padStart(2, '0');
              var seconds = createdAt.getSeconds().toString().padStart(2, '0');
              var formattedTime = hours + '시' + minutes + '분' ;
            %>
            <%= formattedTime %>
          </p>
        </div>
        <% } %> <% } %>
      </div>
      <form id="chat">

        <input type="text" id="message" placeholder="메세지 입력" />
        <button class="btn-sm btn-primary">입력</button>
      </form>
    </div>
  </div>

  <script>
    window.onload = function () {
      // 버튼 요소를 찾아서 클릭 이벤트 발생
      var myButton = document.getElementById("btn");
      myButton.click();
    };
    const socket = io({ transports: ["websocket"], upgrade: false });
    const roomForm = document.querySelector("#room");
    const chatForm = document.querySelector("#chat");
    const msg = document.querySelector("#msg");
    const notice = document.querySelector("#notice");

    let myName;
    let rooName;
    let userid_num = roomForm.querySelector("#userid_num").value;

    //메세지 띄우기
    socket.on("newMessage", (newClubChat) => {
      // socket.on("newMessage", (message, nick) => {
      // console.log("newMessage > ", message, nick);
      console.log("newMessage > ", newClubChat);




      const div = document.createElement("div");
      //   const p = document.createElement("p");
      if (myName === newClubChat.from_name) {
        //내가입력한 텍스트
        div.classList.add("my-chat");
        div.innerHTML = `<p class="mychatMsg">${newClubChat.content}</p><p class="mychatTime">${newClubChat.createdAt}</p>`;
      } else {
        div.classList.add("other-chat");
        div.innerHTML = `<p class="otherchatName">${newClubChat.from_name}</p><p class="otherchatMsg">${newClubChat.content}</p><p class="mychatTime">${newClubChat.createdAt}</p>`;
      }
      // console.log("div >>>>", div);

      //채팅 텍스트
      //   p.textContent = `${nick} : ${message}`;
      //   div.appendChild(p);
      msg.appendChild(div);
      msg.scrollTop = msg.scrollHeight;
    });

    //입장 메세지 이벤트
    socket.on("notice", (message) => {
      const div = document.createElement("div");
      const p = document.createElement("p");
      p.textContent = message;
      div.appendChild(p);
      notice.appendChild(div);
    });

    ///폼 이벤트
    roomForm.addEventListener("submit", (e) => {
      e.preventDefault();
      //   const roomName = roomForm.querySelector("#roomName");
      roomName = roomForm.querySelector("#roomName");
      const userName = roomForm.querySelector("#userName");
      // if (roomName.value === "" || userName.value === "") {
      //   alert("방이름과 닉네임 적어주세요");
      //   return;
      // }
      console.log(roomName.value, userName.value);

      socket.emit("create", roomName.value, userName.value, () => {
        const main = document.querySelector("#main");
        const body = document.querySelector("#body");
        main.hidden = true;
        body.hidden = false;
        //전역변수에 입력한 닉네임을 저장
        myName = userName.value;
      });
    });

    //이전 메세지 불러오기
    /*
    socket.on("preChats", (data) => {
      // console.log("myclubChat preChats  >  ", data.chats[0]);
      for (let i = 0; i < data.chats.length; i++) {
        let div = document.createElement("div");
        let html = "";
        console.log("myclubChat preChats  >  ", data.chats[i].from_name);
        if (data.userName === data.chats[i].from_name) {
          //내가입력한 텍스트
          div.classList.add("my-chat");
          html = `<p class="mychatMsg">${data.chats[i].content}</p>`;
          if (data.chats[i].createdAt !== data.chats[i + 1].createdAt) {
            html += `<p class="mychatTime">${data.chats[i].createdAt}</p>`;
          }
          div.innerHTML = html;
          msg.appendChild(div);
        } else if (data.userName !== data.chats[i].from_name) {
          div.classList.add("other-chat");
          if (data.chats[i - 1].from_name !== data.chats[i].from_name) {
            html += `<p class="otherchatName">${data.chats[i].from_name}</p>`;
          }
          html += `<p class="otherchatMsg">${data.chats[i].content}</p>`;
          if (data.chats[i].createdAt !== data.chats[i + 1].createdAt) {
            html += `<p class="otherchatTime">${data.chats[i].createdAt}</p>`;
          }
          div.innerHTML = html;
          msg.appendChild(div);
        }
      }
    });
    */
    chatForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const roomName = roomForm.querySelector("#roomName");
      const message = document.querySelector("#message");
      const msg = {
        nick: myName,
        roomName: roomName.value,
        message: message.value,
        userid_num: userid_num,
      };
      console.log("ejs msg", msg);
      socket.emit("sendMessage", msg);
      message.value = "";
    });
  </script>
</body>

</html>